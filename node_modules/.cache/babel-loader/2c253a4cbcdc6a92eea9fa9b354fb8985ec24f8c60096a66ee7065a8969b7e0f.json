{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loff\\\\phobia-movie-search\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport SearchBar from \"./components/SearchBar\";\nimport CategoryList from \"./components/CategoryList\";\nimport MovieList from \"./components/MovieList\";\nimport \"./styles.css\";\nimport \"./App.css\";\nimport cinecaptionTTF from \"./fonts/cinecaption226.ttf\";\nimport playfairDisplayTTF from \"./fonts/PlayfairDisplay-VariableFont_wght.ttf\"; // ← 追加\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"popular\");\n  const [movies, setMovies] = useState([]);\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n  ;\n  useEffect(() => {\n    const fetchMovies = async () => {\n      if (!API_KEY) {\n        console.error(\"APIキーが設定されていません\");\n        setMovies([]);\n        return;\n      }\n      let url = \"\";\n      if (searchQuery.trim() !== \"\") {\n        url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=ja-JP&query=${encodeURIComponent(searchQuery)}`;\n      } else {\n        url = `https://api.themoviedb.org/3/movie/${selectedCategory}?api_key=${API_KEY}&language=ja-JP`;\n      }\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          console.error(\"APIリクエスト失敗:\", response.status);\n          setMovies([]);\n          return;\n        }\n        const data = await response.json();\n        setMovies(Array.isArray(data.results) ? data.results : []);\n      } catch (error) {\n        console.error(\"映画データ取得失敗:\", error);\n        setMovies([]);\n      }\n    };\n    fetchMovies();\n  }, [searchQuery, selectedCategory, API_KEY]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: query => setSearchQuery(query),\n      onCategoryChange: category => {\n        setSelectedCategory(category);\n        setSearchQuery(\"\"); // カテゴリ切り替え時は検索ワードをクリアすることで競合防止\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"r96EylcuGER4Df6UD0fd9TljsZ8=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","SearchBar","CategoryList","MovieList","cinecaptionTTF","playfairDisplayTTF","jsxDEV","_jsxDEV","App","_s","searchQuery","setSearchQuery","selectedCategory","setSelectedCategory","movies","setMovies","API_KEY","process","env","REACT_APP_TMDB_API_KEY","fetchMovies","console","error","url","trim","encodeURIComponent","response","fetch","ok","status","data","json","Array","isArray","results","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","query","onCategoryChange","category","_c","$RefreshReg$"],"sources":["C:/Users/loff/phobia-movie-search/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport SearchBar from \"./components/SearchBar\";\nimport CategoryList from \"./components/CategoryList\";\nimport MovieList from \"./components/MovieList\";\nimport \"./styles.css\";\nimport \"./App.css\";\nimport cinecaptionTTF from \"./fonts/cinecaption226.ttf\";\nimport playfairDisplayTTF from \"./fonts/PlayfairDisplay-VariableFont_wght.ttf\"; // ← 追加\n\nfunction App() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"popular\");\n  const [movies, setMovies] = useState([]);\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;;\n\n    useEffect(() => {\n    const fetchMovies = async () => {\n      if (!API_KEY) {\n        console.error(\"APIキーが設定されていません\");\n        setMovies([]);\n        return;\n      }\n\n      let url = \"\";\n      if (searchQuery.trim() !== \"\") {\n        url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=ja-JP&query=${encodeURIComponent(searchQuery)}`;\n      } else {\n        url = `https://api.themoviedb.org/3/movie/${selectedCategory}?api_key=${API_KEY}&language=ja-JP`;\n      }\n\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          console.error(\"APIリクエスト失敗:\", response.status);\n          setMovies([]);\n          return;\n        }\n        const data = await response.json();\n        setMovies(Array.isArray(data.results) ? data.results : []);\n      } catch (error) {\n        console.error(\"映画データ取得失敗:\", error);\n        setMovies([]);\n      }\n    };\n\n    fetchMovies();\n  }, [searchQuery, selectedCategory, API_KEY]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <SearchBar\n        onSearch={(query) => setSearchQuery(query)}\n        onCategoryChange={(category) => {\n          setSelectedCategory(category);\n          setSearchQuery(\"\");  // カテゴリ切り替え時は検索ワードをクリアすることで競合防止\n        }}\n      />\n      <MovieList movies={movies} />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}