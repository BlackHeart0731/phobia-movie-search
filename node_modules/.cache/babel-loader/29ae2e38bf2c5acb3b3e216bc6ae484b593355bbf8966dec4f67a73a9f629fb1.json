{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loff\\\\phobia-movie-search\\\\src\\\\MovieCategories.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_TMDB_API_KEY || \"YOUR_DEFAULT_API_KEY\"; // APIキーのデフォルト値\n\nconst categories = [{\n  id: \"upcoming\",\n  title: \"公開予定の映画\",\n  endpoint: \"upcoming\"\n}, {\n  id: \"nowPlaying\",\n  title: \"上映中の映画\",\n  endpoint: \"now_playing\"\n}, {\n  id: \"popular\",\n  title: \"話題の映画\",\n  endpoint: \"popular\"\n}, {\n  id: \"topRated\",\n  title: \"評価の高い映画\",\n  endpoint: \"top_rated\"\n}];\nconst MovieList = ({\n  movies,\n  visibleCount,\n  showMoreMovies,\n  categoryId\n}) => {\n  console.log(`表示する映画データ (${categoryId}):`, movies); // ✅ ログ確認\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list\",\n    children: [movies.slice(0, visibleCount).map(movie => {\n      var _movie$release_date;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"/placeholder.png\",\n          alt: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [movie.title, \" (\", (_movie$release_date = movie.release_date) === null || _movie$release_date === void 0 ? void 0 : _movie$release_date.substring(0, 4), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this);\n    }), visibleCount < movies.length && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"load-more\",\n      onClick: () => showMoreMovies(categoryId),\n      children: \"\\u3082\\u3063\\u3068\\u898B\\u308B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_c = MovieList;\nconst MovieCategories = () => {\n  _s();\n  const [movies, setMovies] = useState({});\n  const [visibleCount, setVisibleCount] = useState({});\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        console.log(\"映画データを取得中...\"); // ✅ APIリクエスト開始ログ\n\n        const responses = await Promise.all(categories.map(cat => axios.get(`https://api.themoviedb.org/3/movie/${cat.endpoint}?api_key=${API_KEY}&language=ja-JP&page=1`)));\n        const newMovies = {};\n        const newVisibleCount = {};\n        categories.forEach((cat, index) => {\n          newMovies[cat.id] = responses[index].data.results;\n          newVisibleCount[cat.id] = 8;\n        });\n        console.log(\"取得した映画データ:\", newMovies); // ✅ APIデータ確認ログ\n        setMovies(newMovies);\n        setVisibleCount(newVisibleCount);\n      } catch (error) {\n        console.error(\"映画データの取得に失敗しました\", error); // ✅ エラーログ\n      }\n    }\n    fetchMovies();\n  }, []);\n  const showMoreMovies = categoryId => {\n    setVisibleCount(prev => ({\n      ...prev,\n      [categoryId]: prev[categoryId] + 8\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: categories.map(cat => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: cat.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n        movies: movies[cat.id] || [],\n        visibleCount: visibleCount[cat.id] || 0,\n        showMoreMovies: showMoreMovies,\n        categoryId: cat.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, cat.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieCategories, \"W4MocU+zS9/qNSSGiLkqDR8idA4=\");\n_c2 = MovieCategories;\nexport default MovieCategories;\nvar _c, _c2;\n$RefreshReg$(_c, \"MovieList\");\n$RefreshReg$(_c2, \"MovieCategories\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_KEY","process","env","REACT_APP_TMDB_API_KEY","categories","id","title","endpoint","MovieList","movies","visibleCount","showMoreMovies","categoryId","console","log","className","children","slice","map","movie","_movie$release_date","src","poster_path","alt","fileName","_jsxFileName","lineNumber","columnNumber","release_date","substring","length","onClick","_c","MovieCategories","_s","setMovies","setVisibleCount","fetchMovies","responses","Promise","all","cat","get","newMovies","newVisibleCount","forEach","index","data","results","error","prev","_c2","$RefreshReg$"],"sources":["C:/Users/loff/phobia-movie-search/src/MovieCategories.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst API_KEY = process.env.REACT_APP_TMDB_API_KEY || \"YOUR_DEFAULT_API_KEY\"; // APIキーのデフォルト値\r\n\r\nconst categories = [\r\n  { id: \"upcoming\", title: \"公開予定の映画\", endpoint: \"upcoming\" },\r\n  { id: \"nowPlaying\", title: \"上映中の映画\", endpoint: \"now_playing\" },\r\n  { id: \"popular\", title: \"話題の映画\", endpoint: \"popular\" },\r\n  { id: \"topRated\", title: \"評価の高い映画\", endpoint: \"top_rated\" }\r\n];\r\n\r\nconst MovieList = ({ movies, visibleCount, showMoreMovies, categoryId }) => {\r\n  console.log(`表示する映画データ (${categoryId}):`, movies); // ✅ ログ確認\r\n\r\n  return (\r\n    <div className=\"movie-list\">\r\n      {movies.slice(0, visibleCount).map(movie => (\r\n        <div key={movie.id} className=\"movie-item\">\r\n          <img\r\n            src={movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"/placeholder.png\"}\r\n            alt={movie.title}\r\n          />\r\n          <h3>{movie.title} ({movie.release_date?.substring(0, 4)})</h3>\r\n        </div>\r\n      ))}\r\n      {visibleCount < movies.length && (\r\n        <button className=\"load-more\" onClick={() => showMoreMovies(categoryId)}>もっと見る</button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MovieCategories = () => {\r\n  const [movies, setMovies] = useState({});\r\n  const [visibleCount, setVisibleCount] = useState({});\r\n\r\n  useEffect(() => {\r\n    async function fetchMovies() {\r\n      try {\r\n        console.log(\"映画データを取得中...\"); // ✅ APIリクエスト開始ログ\r\n\r\n        const responses = await Promise.all(\r\n          categories.map(cat =>\r\n            axios.get(`https://api.themoviedb.org/3/movie/${cat.endpoint}?api_key=${API_KEY}&language=ja-JP&page=1`)\r\n          )\r\n        );\r\n\r\n        const newMovies = {};\r\n        const newVisibleCount = {};\r\n        categories.forEach((cat, index) => {\r\n          newMovies[cat.id] = responses[index].data.results;\r\n          newVisibleCount[cat.id] = 8;\r\n        });\r\n\r\n        console.log(\"取得した映画データ:\", newMovies); // ✅ APIデータ確認ログ\r\n        setMovies(newMovies);\r\n        setVisibleCount(newVisibleCount);\r\n      } catch (error) {\r\n        console.error(\"映画データの取得に失敗しました\", error); // ✅ エラーログ\r\n      }\r\n    }\r\n\r\n    fetchMovies();\r\n  }, []);\r\n\r\n  const showMoreMovies = categoryId => {\r\n    setVisibleCount(prev => ({\r\n      ...prev,\r\n      [categoryId]: prev[categoryId] + 8\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {categories.map(cat => (\r\n        <div key={cat.id}>\r\n          <h2>{cat.title}</h2>\r\n          <MovieList\r\n            movies={movies[cat.id] || []}\r\n            visibleCount={visibleCount[cat.id] || 0}\r\n            showMoreMovies={showMoreMovies}\r\n            categoryId={cat.id}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieCategories;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}