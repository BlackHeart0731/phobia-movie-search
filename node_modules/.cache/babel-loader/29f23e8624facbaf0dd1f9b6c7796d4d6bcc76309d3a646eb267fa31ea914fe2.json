{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loff\\\\phobia-movie-search\\\\src\\\\components\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieList = ({\n  category,\n  query\n}) => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [visibleCount, setVisibleCount] = useState(8); // ✅ 最初の表示数\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n  const fetchMovies = async () => {\n    console.log(\"選択されたカテゴリー:\", category); // ✅ カテゴリー確認\n\n    let url = query ? `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=ja-JP&query=${query}` : `https://api.themoviedb.org/3/movie/${category}?api_key=${API_KEY}&language=ja-JP`;\n    console.log(\"リクエストURL:\", url); // ✅ APIに送るURL確認\n\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        console.error(`APIリクエスト失敗: ステータスコード ${response.status}`);\n        setMovies([]);\n        return;\n      }\n      const data = await response.json();\n      console.log(\"APIレスポンス:\", data);\n      setMovies(data.results || []); // ✅ `undefined` の場合は空配列にする\n    } catch (error) {\n      console.error(\"映画データの取得に失敗しました:\", error);\n      setMovies(data.results || []);\n    }\n  };\n  useEffect(() => {\n    fetchMovies();\n  }, [category, query]);\n  useEffect(() => {\n    if (movies.length > 0) {\n      console.log(\"取得した映画データ:\", movies); // ✅ `movies` の更新時に確認\n    } else {\n      console.warn(\"映画データが空です。リクエストURLやAPIキーを確認してください！\");\n    }\n  }, [movies]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list\",\n    children: movies.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [movies.slice(0, visibleCount).map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"https://via.placeholder.com/500\",\n          alt: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u2B50 \", movie.vote_average]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)), visibleCount < movies.length && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"load-more\",\n        onClick: () => setVisibleCount(visibleCount + 8),\n        children: \"\\u3082\\u3063\\u3068\\u898B\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u26A0\\uFE0F \\u6620\\u753B\\u30C7\\u30FC\\u30BF\\u304C\\u53D6\\u5F97\\u3067\\u304D\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\\u3002\\u30AB\\u30C6\\u30B4\\u30EA\\u3084API\\u30AD\\u30FC\\u3092\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) // ✅ より明確なエラーメッセージ\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"pylvkVtd+qcZePHwHFvPef5qQdI=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieList","category","query","_s","movies","setMovies","visibleCount","setVisibleCount","API_KEY","process","env","REACT_APP_TMDB_API_KEY","fetchMovies","console","log","url","response","fetch","ok","error","status","data","json","results","length","warn","className","children","slice","map","movie","src","poster_path","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","vote_average","id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/loff/phobia-movie-search/src/components/MovieList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst MovieList = ({ category, query }) => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [visibleCount, setVisibleCount] = useState(8); // ✅ 最初の表示数\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n\r\n  const fetchMovies = async () => {\r\n    console.log(\"選択されたカテゴリー:\", category); // ✅ カテゴリー確認\r\n\r\n    let url = query\r\n      ? `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=ja-JP&query=${query}`\r\n      : `https://api.themoviedb.org/3/movie/${category}?api_key=${API_KEY}&language=ja-JP`;\r\n\r\n    console.log(\"リクエストURL:\", url); // ✅ APIに送るURL確認\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n\r\n      if (!response.ok) {\r\n        console.error(`APIリクエスト失敗: ステータスコード ${response.status}`);\r\n        setMovies([]);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"APIレスポンス:\", data);\r\n\r\n      setMovies(data.results || []); // ✅ `undefined` の場合は空配列にする\r\n    } catch (error) {\r\n      console.error(\"映画データの取得に失敗しました:\", error);\r\n      setMovies(data.results || []);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMovies();\r\n  }, [category, query]);\r\n\r\n  useEffect(() => {\r\n    if (movies.length > 0) {\r\n      console.log(\"取得した映画データ:\", movies); // ✅ `movies` の更新時に確認\r\n    } else {\r\n      console.warn(\"映画データが空です。リクエストURLやAPIキーを確認してください！\");\r\n    }\r\n  }, [movies]);\r\n\r\n  return (\r\n    <div className=\"movie-list\">\r\n      {movies.length > 0 ? (\r\n        <>\r\n          {movies.slice(0, visibleCount).map((movie) => (\r\n            <div key={movie.id} className=\"movie-card\">\r\n              <img src={movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"https://via.placeholder.com/500\"} alt={movie.title} />\r\n              <h3>{movie.title}</h3>\r\n              <p>⭐ {movie.vote_average}</p>\r\n            </div>\r\n          ))}\r\n          {visibleCount < movies.length && (\r\n            <button className=\"load-more\" onClick={() => setVisibleCount(visibleCount + 8)}>\r\n              もっと見る\r\n            </button>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p>⚠️ 映画データが取得できませんでした。カテゴリやAPIキーを確認してください。</p> // ✅ より明確なエラーメッセージ\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}