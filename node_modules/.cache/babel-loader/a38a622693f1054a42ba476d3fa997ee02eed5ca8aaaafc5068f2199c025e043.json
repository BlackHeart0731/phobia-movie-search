{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loff\\\\phobia-movie-search\\\\src\\\\components\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback, useState } from \"react\";\nimport styles from \"./MovieList.module.css\";\nimport MoviePoster from \"./MoviePoster\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieList = ({\n  category,\n  query,\n  visibleCount,\n  onMovieClick\n}) => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n  const validatedCategory = category || \"popular\";\n  const fetchMovies = useCallback(async () => {\n    if (!API_KEY) {\n      console.error(\"API_KEY が定義されていません！\");\n      setMovies([]);\n      return;\n    }\n    const url = query ? `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=ja-JP&query=${encodeURIComponent(query)}` : `https://api.themoviedb.org/3/movie/${validatedCategory}?api_key=${API_KEY}&language=ja-JP`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        console.error(`APIリクエスト失敗: ステータスコード ${response.status}`);\n        setMovies([]);\n        return;\n      }\n      const data = await response.json();\n      setMovies(Array.isArray(data.results) ? data.results : []);\n    } catch (error) {\n      console.error(\"映画データの取得に失敗しました:\", error);\n      setMovies([]);\n    }\n  }, [validatedCategory, query, API_KEY]);\n  useEffect(() => {\n    fetchMovies();\n  }, [fetchMovies]);\n  const JapaneseTitle = ({\n    title\n  }) => {\n    if (!title) return null;\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.titleJa,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list\",\n    children: movies.length > 0 ? movies.slice(0, visibleCount).map(movie => {\n      var _movie$vote_average;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.card,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: () => onMovieClick && onMovieClick(movie.id, movie.title),\n          children: /*#__PURE__*/_jsxDEV(MoviePoster, {\n            movieId: movie.id,\n            posterUrl: movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"https://via.placeholder.com/500\",\n            title: movie.title,\n            overview: movie.overview,\n            voteAverage: movie.vote_average\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(JapaneseTitle, {\n          title: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), movie.original_title && movie.original_title !== movie.title && /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: styles.titleEn,\n          children: movie.original_title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u2B50 \", (_movie$vote_average = movie.vote_average) !== null && _movie$vote_average !== void 0 ? _movie$vote_average : \"評価なし\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: \"\\u26A0\\uFE0F \\u6620\\u753B\\u30C7\\u30FC\\u30BF\\u304C\\u53D6\\u5F97\\u3067\\u304D\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\\u3002\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"hK5ggRcTTUXoI86rehhCxkkBrns=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useCallback","useState","styles","MoviePoster","jsxDEV","_jsxDEV","MovieList","category","query","visibleCount","onMovieClick","_s","movies","setMovies","API_KEY","process","env","REACT_APP_TMDB_API_KEY","validatedCategory","fetchMovies","console","error","url","encodeURIComponent","response","fetch","ok","status","data","json","Array","isArray","results","JapaneseTitle","title","className","titleJa","children","fileName","_jsxFileName","lineNumber","columnNumber","length","slice","map","movie","_movie$vote_average","card","style","cursor","onClick","id","movieId","posterUrl","poster_path","overview","voteAverage","vote_average","original_title","titleEn","color","_c","$RefreshReg$"],"sources":["C:/Users/loff/phobia-movie-search/src/components/MovieList.js"],"sourcesContent":["import React, { useEffect, useCallback, useState } from \"react\";\r\nimport styles from \"./MovieList.module.css\";\r\nimport MoviePoster from \"./MoviePoster\";\r\n\r\nconst MovieList = ({ category, query, visibleCount, onMovieClick }) => {\r\n  const [movies, setMovies] = useState([]);\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n  const validatedCategory = category || \"popular\";\r\n\r\n  const fetchMovies = useCallback(async () => {\r\n    if (!API_KEY) {\r\n      console.error(\"API_KEY が定義されていません！\");\r\n      setMovies([]);\r\n      return;\r\n    }\r\n\r\n    const url = query\r\n      ? `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=ja-JP&query=${encodeURIComponent(query)}`\r\n      : `https://api.themoviedb.org/3/movie/${validatedCategory}?api_key=${API_KEY}&language=ja-JP`;\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        console.error(`APIリクエスト失敗: ステータスコード ${response.status}`);\r\n        setMovies([]);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      setMovies(Array.isArray(data.results) ? data.results : []);\r\n    } catch (error) {\r\n      console.error(\"映画データの取得に失敗しました:\", error);\r\n      setMovies([]);\r\n    }\r\n  }, [validatedCategory, query, API_KEY]);\r\n\r\n  useEffect(() => {\r\n    fetchMovies();\r\n  }, [fetchMovies]);\r\n\r\n  const JapaneseTitle = ({ title }) => {\r\n    if (!title) return null;\r\n    return <h3 className={styles.titleJa}>{title}</h3>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"movie-list\">\r\n      {movies.length > 0 ? (\r\n        movies.slice(0, visibleCount).map((movie) => (\r\n          <div key={movie.id} className={styles.card}>\r\n            <div\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => onMovieClick && onMovieClick(movie.id, movie.title)}\r\n            >\r\n              <MoviePoster\r\n                movieId={movie.id}\r\n                posterUrl={\r\n                  movie.poster_path\r\n                    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\r\n                    : \"https://via.placeholder.com/500\"\r\n                }\r\n                title={movie.title}\r\n                overview={movie.overview}\r\n                voteAverage={movie.vote_average}\r\n              />\r\n            </div>\r\n\r\n            <JapaneseTitle title={movie.title} />\r\n            {movie.original_title && movie.original_title !== movie.title && (\r\n              <h4 className={styles.titleEn}>{movie.original_title}</h4>\r\n            )}\r\n            <p>⭐ {movie.vote_average ?? \"評価なし\"}</p>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p style={{ color: \"red\" }}>⚠️ 映画データが取得できませんでした。</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}