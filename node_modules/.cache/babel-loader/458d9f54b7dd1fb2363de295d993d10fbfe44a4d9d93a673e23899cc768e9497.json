{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loff\\\\phobia-movie-search\\\\src\\\\MovieCategories.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_TMDB_API_KEY || \"YOUR_DEFAULT_API_KEY\"; // APIキーのデフォルト値\n\nconst categories = [{\n  id: \"upcoming\",\n  title: \"公開予定の映画\",\n  endpoint: \"upcoming\"\n}, {\n  id: \"nowPlaying\",\n  title: \"上映中の映画\",\n  endpoint: \"now_playing\"\n}, {\n  id: \"popular\",\n  title: \"話題の映画\",\n  endpoint: \"popular\"\n}, {\n  id: \"topRated\",\n  title: \"評価の高い映画\",\n  endpoint: \"top_rated\"\n}];\nconst MovieList = ({\n  movies,\n  visibleCount,\n  showMoreMovies,\n  categoryId\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"movie-list\",\n  children: [movies.slice(0, visibleCount).map(movie => {\n    var _movie$release_date;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"/placeholder.png\",\n        alt: movie.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [movie.title, \" (\", (_movie$release_date = movie.release_date) === null || _movie$release_date === void 0 ? void 0 : _movie$release_date.substring(0, 4), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, movie.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }), visibleCount < movies.length && /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"load-more\",\n    onClick: () => showMoreMovies(categoryId),\n    children: \"\\u3082\\u3063\\u3068\\u898B\\u308B\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 3\n}, this);\n_c = MovieList;\nconst MovieCategories = () => {\n  _s();\n  const [movies, setMovies] = useState({});\n  const [visibleCount, setVisibleCount] = useState({});\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        const responses = await Promise.all(categories.map(cat => axios.get(`https://api.themoviedb.org/3/movie/${cat.endpoint}?api_key=${API_KEY}&language=ja-JP&page=1`)));\n        const newMovies = {};\n        const newVisibleCount = {};\n        categories.forEach((cat, index) => {\n          newMovies[cat.id] = responses[index].data.results;\n          newVisibleCount[cat.id] = 8;\n        });\n        setMovies(newMovies);\n        setVisibleCount(newVisibleCount);\n      } catch (error) {\n        console.error(\"映画データの取得に失敗しました\", error);\n      }\n    }\n    fetchMovies();\n  }, []);\n  const showMoreMovies = categoryId => {\n    setVisibleCount(prev => ({\n      ...prev,\n      [categoryId]: prev[categoryId] + 8\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: categories.map(cat => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: cat.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n        movies: movies[cat.id] || [],\n        visibleCount: visibleCount[cat.id] || 0,\n        showMoreMovies: showMoreMovies,\n        categoryId: cat.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, cat.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieCategories, \"W4MocU+zS9/qNSSGiLkqDR8idA4=\");\n_c2 = MovieCategories;\nexport default MovieCategories;\nvar _c, _c2;\n$RefreshReg$(_c, \"MovieList\");\n$RefreshReg$(_c2, \"MovieCategories\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_KEY","process","env","REACT_APP_TMDB_API_KEY","categories","id","title","endpoint","MovieList","movies","visibleCount","showMoreMovies","categoryId","className","children","slice","map","movie","_movie$release_date","src","poster_path","alt","fileName","_jsxFileName","lineNumber","columnNumber","release_date","substring","length","onClick","_c","MovieCategories","_s","setMovies","setVisibleCount","fetchMovies","responses","Promise","all","cat","get","newMovies","newVisibleCount","forEach","index","data","results","error","console","prev","_c2","$RefreshReg$"],"sources":["C:/Users/loff/phobia-movie-search/src/MovieCategories.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst API_KEY = process.env.REACT_APP_TMDB_API_KEY || \"YOUR_DEFAULT_API_KEY\"; // APIキーのデフォルト値\r\n\r\nconst categories = [\r\n  { id: \"upcoming\", title: \"公開予定の映画\", endpoint: \"upcoming\" },\r\n  { id: \"nowPlaying\", title: \"上映中の映画\", endpoint: \"now_playing\" },\r\n  { id: \"popular\", title: \"話題の映画\", endpoint: \"popular\" },\r\n  { id: \"topRated\", title: \"評価の高い映画\", endpoint: \"top_rated\" }\r\n];\r\n\r\nconst MovieList = ({ movies, visibleCount, showMoreMovies, categoryId }) => (\r\n  <div className=\"movie-list\">\r\n    {movies.slice(0, visibleCount).map(movie => (\r\n      <div key={movie.id} className=\"movie-item\">\r\n        <img\r\n          src={movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"/placeholder.png\"}\r\n          alt={movie.title}\r\n        />\r\n        <h3>{movie.title} ({movie.release_date?.substring(0, 4)})</h3>\r\n      </div>\r\n    ))}\r\n    {visibleCount < movies.length && (\r\n      <button className=\"load-more\" onClick={() => showMoreMovies(categoryId)}>もっと見る</button>\r\n    )}\r\n  </div>\r\n);\r\n\r\nconst MovieCategories = () => {\r\n  const [movies, setMovies] = useState({});\r\n  const [visibleCount, setVisibleCount] = useState({});\r\n\r\n  useEffect(() => {\r\n    async function fetchMovies() {\r\n      try {\r\n        const responses = await Promise.all(\r\n          categories.map(cat =>\r\n            axios.get(`https://api.themoviedb.org/3/movie/${cat.endpoint}?api_key=${API_KEY}&language=ja-JP&page=1`)\r\n          )\r\n        );\r\n\r\n        const newMovies = {};\r\n        const newVisibleCount = {};\r\n        categories.forEach((cat, index) => {\r\n          newMovies[cat.id] = responses[index].data.results;\r\n          newVisibleCount[cat.id] = 8;\r\n        });\r\n\r\n        setMovies(newMovies);\r\n        setVisibleCount(newVisibleCount);\r\n      } catch (error) {\r\n        console.error(\"映画データの取得に失敗しました\", error);\r\n      }\r\n    }\r\n\r\n    fetchMovies();\r\n  }, []);\r\n\r\n  const showMoreMovies = categoryId => {\r\n    setVisibleCount(prev => ({\r\n      ...prev,\r\n      [categoryId]: prev[categoryId] + 8\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {categories.map(cat => (\r\n        <div key={cat.id}>\r\n          <h2>{cat.title}</h2>\r\n          <MovieList\r\n            movies={movies[cat.id] || []}\r\n            visibleCount={visibleCount[cat.id] || 0}\r\n            showMoreMovies={showMoreMovies}\r\n            categoryId={cat.id}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieCategories;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}