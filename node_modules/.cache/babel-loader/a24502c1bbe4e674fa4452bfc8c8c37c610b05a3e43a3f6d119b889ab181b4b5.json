{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loff\\\\phobia-movie-search\\\\src\\\\components\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieList = ({\n  category,\n  query\n}) => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [visibleCount, setVisibleCount] = useState(8); // ✅ 最初の表示数\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n  const fetchMovies = async () => {\n    console.log(\"選択されたカテゴリー:\", category); // ✅ カテゴリー確認\n\n    let url = query ? `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=ja-JP&query=${query}` : `https://api.themoviedb.org/3/movie/${category}?api_key=${API_KEY}&language=ja-JP`;\n    console.log(\"リクエストURL:\", url); // ✅ APIに送るURL確認\n\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        console.error(`APIリクエスト失敗: ステータスコード ${response.status}`);\n        setMovies([]);\n        return;\n      }\n      const data = await response.json();\n      console.log(\"APIレスポンス:\", data);\n      if (!data.results || data.results.length === 0) {\n        console.warn(\"映画データが見つかりませんでした。カテゴリが適切か確認してください:\", data);\n        setMovies([]);\n        return;\n      }\n      setMovies(data.results);\n    } catch (error) {\n      console.error(\"映画データの取得に失敗しました:\", error);\n      setMovies([]);\n    }\n  };\n  useEffect(() => {\n    fetchMovies();\n  }, [category, query]);\n  useEffect(() => {\n    if (movies.length > 0) {\n      console.log(\"取得した映画データ:\", movies); // ✅ `movies` の更新時に確認\n    } else {\n      console.warn(\"取得された映画データが空です。リクエストを確認してください！\");\n    }\n  }, [movies]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list\",\n    children: [movies.length > 0 ? movies.slice(0, visibleCount).map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"代替画像URL\",\n        alt: movie.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: movie.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u2B50 \", movie.vote_average]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)]\n    }, movie.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u6620\\u753B\\u30C7\\u30FC\\u30BF\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) // ✅ データがない場合のメッセージ\n    , visibleCount < movies.length && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"load-more\",\n      onClick: () => setVisibleCount(visibleCount + 8),\n      children: \"\\u3082\\u3063\\u3068\\u898B\\u308B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"pylvkVtd+qcZePHwHFvPef5qQdI=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","MovieList","category","query","_s","movies","setMovies","visibleCount","setVisibleCount","API_KEY","process","env","REACT_APP_TMDB_API_KEY","fetchMovies","console","log","url","response","fetch","ok","error","status","data","json","results","length","warn","className","children","slice","map","movie","src","poster_path","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","vote_average","id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/loff/phobia-movie-search/src/components/MovieList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst MovieList = ({ category, query }) => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [visibleCount, setVisibleCount] = useState(8); // ✅ 最初の表示数\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n\r\n  const fetchMovies = async () => {\r\n    console.log(\"選択されたカテゴリー:\", category); // ✅ カテゴリー確認\r\n\r\n    let url = query\r\n      ? `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=ja-JP&query=${query}`\r\n      : `https://api.themoviedb.org/3/movie/${category}?api_key=${API_KEY}&language=ja-JP`;\r\n\r\n    console.log(\"リクエストURL:\", url); // ✅ APIに送るURL確認\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n\r\n      if (!response.ok) {\r\n        console.error(`APIリクエスト失敗: ステータスコード ${response.status}`);\r\n        setMovies([]);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"APIレスポンス:\", data);\r\n\r\n      if (!data.results || data.results.length === 0) {\r\n        console.warn(\"映画データが見つかりませんでした。カテゴリが適切か確認してください:\", data);\r\n        setMovies([]);\r\n        return;\r\n      }\r\n\r\n      setMovies(data.results);\r\n    } catch (error) {\r\n      console.error(\"映画データの取得に失敗しました:\", error);\r\n      setMovies([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMovies();\r\n  }, [category, query]);\r\n\r\n  useEffect(() => {\r\n    if (movies.length > 0) {\r\n      console.log(\"取得した映画データ:\", movies); // ✅ `movies` の更新時に確認\r\n    } else {\r\n      console.warn(\"取得された映画データが空です。リクエストを確認してください！\");\r\n    }\r\n  }, [movies]);\r\n\r\n  return (\r\n    <div className=\"movie-list\">\r\n      {movies.length > 0 ? (\r\n        movies.slice(0, visibleCount).map((movie) => (\r\n          <div key={movie.id} className=\"movie-card\">\r\n            <img src={movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"代替画像URL\"} alt={movie.title} />\r\n            <h3>{movie.title}</h3>\r\n            <p>⭐ {movie.vote_average}</p>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>映画データがありません</p> // ✅ データがない場合のメッセージ\r\n      )}\r\n\r\n      {visibleCount < movies.length && (\r\n        <button className=\"load-more\" onClick={() => setVisibleCount(visibleCount + 8)}>\r\n          もっと見る\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}