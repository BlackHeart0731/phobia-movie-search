{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loff\\\\phobia-movie-search\\\\src\\\\components\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport styles from \"./MovieList.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieList = ({\n  category,\n  query\n}) => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [visibleCount, setVisibleCount] = useState(8);\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n  const validatedCategory = category || \"popular\";\n  const fetchMovies = useCallback(async () => {\n    if (!API_KEY) {\n      console.error(\"API_KEY が定義されていません！\");\n      setMovies([]);\n      return;\n    }\n    const url = query ? `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=ja-JP&query=${query}` : `https://api.themoviedb.org/3/movie/${validatedCategory}?api_key=${API_KEY}&language=ja-JP`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        console.error(`APIリクエスト失敗: ステータスコード ${response.status}`);\n        setMovies([]);\n        return;\n      }\n      const data = await response.json();\n      setMovies(Array.isArray(data.results) ? data.results : []);\n    } catch (error) {\n      console.error(\"映画データの取得に失敗しました:\", error);\n      setMovies([]);\n    }\n  }, [validatedCategory, query, API_KEY]);\n  useEffect(() => {\n    fetchMovies();\n  }, [fetchMovies]);\n  const JapaneseTitle = ({\n    title\n  }) => {\n    if (!title) return null;\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.titleJa,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list\",\n    children: Array.isArray(movies) && movies.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [movies.slice(0, visibleCount).map(movie => {\n        var _movie$vote_average;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.card,\n          children: [/*#__PURE__*/_jsxDEV(MoviePoster, {\n            posterUrl: movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"https://via.placeholder.com/500\",\n            title: movie.title,\n            overview: movie.overview // あらすじを渡す\n            // 他に必要ならpropsを足す\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(JapaneseTitle, {\n            title: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), movie.original_title && movie.original_title !== movie.title && /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: styles.titleEn,\n            children: movie.original_title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u2B50 \", (_movie$vote_average = movie.vote_average) !== null && _movie$vote_average !== void 0 ? _movie$vote_average : \"評価なし\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this);\n      }), visibleCount < movies.length && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"load-more\",\n        onClick: () => setVisibleCount(visibleCount + 8),\n        children: \"\\u3082\\u3063\\u3068\\u898B\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: \"\\u26A0\\uFE0F \\u6620\\u753B\\u30C7\\u30FC\\u30BF\\u304C\\u53D6\\u5F97\\u3067\\u304D\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\\u3002\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"LKiODgMTldYp7g+j9nzVKQBqLzY=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieList","category","query","_s","movies","setMovies","visibleCount","setVisibleCount","API_KEY","process","env","REACT_APP_TMDB_API_KEY","validatedCategory","fetchMovies","console","error","url","response","fetch","ok","status","data","json","Array","isArray","results","JapaneseTitle","title","className","titleJa","children","fileName","_jsxFileName","lineNumber","columnNumber","length","slice","map","movie","_movie$vote_average","card","MoviePoster","posterUrl","poster_path","overview","original_title","titleEn","vote_average","id","onClick","style","color","_c","$RefreshReg$"],"sources":["C:/Users/loff/phobia-movie-search/src/components/MovieList.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport styles from \"./MovieList.module.css\";\r\n\r\nconst MovieList = ({ category, query }) => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [visibleCount, setVisibleCount] = useState(8);\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n  const validatedCategory = category || \"popular\";\r\n\r\n  const fetchMovies = useCallback(async () => {\r\n    if (!API_KEY) {\r\n      console.error(\"API_KEY が定義されていません！\");\r\n      setMovies([]);\r\n      return;\r\n    }\r\n\r\n    const url = query\r\n      ? `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=ja-JP&query=${query}`\r\n      : `https://api.themoviedb.org/3/movie/${validatedCategory}?api_key=${API_KEY}&language=ja-JP`;\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        console.error(`APIリクエスト失敗: ステータスコード ${response.status}`);\r\n        setMovies([]);\r\n        return;\r\n      }\r\n      const data = await response.json();\r\n      setMovies(Array.isArray(data.results) ? data.results : []);\r\n    } catch (error) {\r\n      console.error(\"映画データの取得に失敗しました:\", error);\r\n      setMovies([]);\r\n    }\r\n  }, [validatedCategory, query, API_KEY]);\r\n\r\n  useEffect(() => {\r\n    fetchMovies();\r\n  }, [fetchMovies]);\r\n\r\n  const JapaneseTitle = ({ title }) => {\r\n    if (!title) return null;\r\n    return <h3 className={styles.titleJa}>{title}</h3>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"movie-list\">\r\n      {Array.isArray(movies) && movies.length > 0 ? (\r\n        <>\r\n          {movies.slice(0, visibleCount).map((movie) => (\r\n            <div key={movie.id} className={styles.card}>\r\n              <MoviePoster\r\n                posterUrl={\r\n                  movie.poster_path\r\n                    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\r\n                    : \"https://via.placeholder.com/500\"\r\n                }\r\n                title={movie.title}\r\n                overview={movie.overview}  // あらすじを渡す\r\n                // 他に必要ならpropsを足す\r\n              />\r\n              <JapaneseTitle title={movie.title} />\r\n              {movie.original_title && movie.original_title !== movie.title && (\r\n                <h4 className={styles.titleEn}>{movie.original_title}</h4>\r\n              )}\r\n              <p>⭐ {movie.vote_average ?? \"評価なし\"}</p>\r\n            </div>\r\n          ))}\r\n          {visibleCount < movies.length && (\r\n            <button\r\n              className=\"load-more\"\r\n              onClick={() => setVisibleCount(visibleCount + 8)}\r\n            >\r\n              もっと見る\r\n            </button>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p style={{ color: \"red\" }}>⚠️ 映画データが取得できませんでした。</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}